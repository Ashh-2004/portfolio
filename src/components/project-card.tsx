"use client";

import * as React from "react";
import Image from "next/image";
import Link from "next/link";
import { AlertCircle, Github, Lightbulb, Loader2 } from "lucide-react";
import { generateProjectInsights } from "@/ai/flows/project-insights";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Alert, AlertDescription, AlertTitle } from "./ui/alert";
import { Skeleton } from "./ui/skeleton";

export type Project = {
  title: string;
  summary: string;
  tools: string[];
  githubLink: string;
  previewImage: string;
  dataAiHint: string;
};

type ProjectCardProps = {
  project: Project;
};

export function ProjectCard({ project }: ProjectCardProps) {
  const [insights, setInsights] = React.useState("");
  const [loading, setLoading] = React.useState(false);
  const [error, setError] = React.useState<string | null>(null);
  const [isDialogOpen, setIsDialogOpen] = React.useState(false);

  const handleGetInsights = async () => {
    if (insights) return; // Don't re-fetch if we already have insights

    setLoading(true);
    setError(null);
    try {
      const result = await generateProjectInsights({
        title: project.title,
        summary: project.summary,
        toolsUsed: project.tools.join(", "),
        githubLink: project.githubLink,
      });
      setInsights(result.insights);
    } catch (e) {
      setError("Failed to generate insights. Please try again later.");
      console.error(e);
    } finally {
      setLoading(false);
    }
  };
  
  // Reset state when dialog is closed
  React.useEffect(() => {
    if (!isDialogOpen) {
      setInsights("");
      setLoading(false);
      setError(null);
    }
  }, [isDialogOpen]);

  return (
    <Card className="flex h-full flex-col overflow-hidden transition-shadow duration-300 hover:shadow-xl">
      <Image
        src={project.previewImage}
        alt={project.title}
        width={600}
        height={400}
        className="w-full h-56 object-cover"
        data-ai-hint={project.dataAiHint}
      />
      <CardHeader>
        <CardTitle className="font-headline">{project.title}</CardTitle>
        <CardDescription>{project.summary}</CardDescription>
      </CardHeader>
      <CardContent className="flex-grow">
        <div className="flex flex-wrap gap-2">
          {project.tools.map((tool) => (
            <Badge key={tool} variant="outline">
              {tool}
            </Badge>
          ))}
        </div>
      </CardContent>
      <CardFooter className="flex justify-between bg-muted/50 p-4">
        <Button variant="outline" asChild>
          <Link href={project.githubLink} target="_blank">
            <Github className="mr-2 h-4 w-4" />
            GitHub
          </Link>
        </Button>
        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
          <DialogTrigger asChild>
            <Button onClick={handleGetInsights}>
              <Lightbulb className="mr-2 h-4 w-4" />
              AI Insights
            </Button>
          </DialogTrigger>
          <DialogContent className="sm:max-w-[425px]">
            <DialogHeader>
              <DialogTitle className="font-headline">
                AI Insights for {project.title}
              </DialogTitle>
              <DialogDescription>
                Personalized insights generated by AI based on the project data.
              </DialogDescription>
            </DialogHeader>
            <div className="py-4">
              {loading && (
                <div className="space-y-2">
                  <Skeleton className="h-4 w-full" />
                  <Skeleton className="h-4 w-full" />
                  <Skeleton className="h-4 w-3/4" />
                </div>
              )}
              {error && (
                <Alert variant="destructive">
                  <AlertCircle className="h-4 w-4" />
                  <AlertTitle>Error</AlertTitle>
                  <AlertDescription>{error}</AlertDescription>
                </Alert>
              )}
              {insights && <p className="text-sm text-muted-foreground">{insights}</p>}
            </div>
          </DialogContent>
        </Dialog>
      </CardFooter>
    </Card>
  );
}
